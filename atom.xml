<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Edwin&#39;s Blog</title>
  
  <subtitle>网站副标题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wywncdx.github.io/"/>
  <updated>2018-03-29T10:41:54.424Z</updated>
  <id>https://wywncdx.github.io/</id>
  
  <author>
    <name>Edwin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解java this关键字</title>
    <link href="https://wywncdx.github.io/2018/03/29/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://wywncdx.github.io/2018/03/29/深入理解java-this关键字/</id>
    <published>2018-03-29T10:02:55.000Z</published>
    <updated>2018-03-29T10:41:54.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-从字节码文件看this"><a href="#1-从字节码文件看this" class="headerlink" title="1. 从字节码文件看this"></a>1. 从字节码文件看this</h1><p>当我们在方法内部使用this调用属性、方法的时候，你有没有考过this是怎么来的？作为引用变量，this的数据类型是什么？我们在源码中书写的this，编译成字节码文件后变成了什么？jvm又是如何处理this的呢？想弄清楚这几个问题，不懂点儿编译知识和JVM怕是不行的。</p><h2 id="字节码分析"><a href="#字节码分析" class="headerlink" title="字节码分析"></a>字节码分析</h2><p>众所周知，java源码”.java”首先会被编译为字节码文件”.class”。而我们最常用的java编译器就是jdk自带的javac。</p><p>看如下代码，我们对其生成的字节码进行必要分析：</p><p><em>示例</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"I am Base"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">instanceMethod</span><span class="params">(String str1)</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classMethod</span><span class="params">(String str2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码编译后，我们在字节码所在文件夹中执行如下命令：<br><code>javac -verbose Base</code><br>编译后的字节码如下（只截取了一部分）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public java.lang.String name;</span><br><span class="line">  flags: ACC_PUBLIC</span><br><span class="line"></span><br><span class="line">test.Base();</span><br><span class="line">  flags:</span><br><span class="line">  Code:</span><br><span class="line">    stack=2, locals=1, args_size=1</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: aload_0</span><br><span class="line">       5: ldc           #2                  // String I am Base</span><br><span class="line">       7: putfield      #3                  // Field name:Ljava/lang/String;</span><br><span class="line">      10: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 8: 0</span><br><span class="line">      line 9: 4</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0      11     0  this   Ltest/Base;</span><br><span class="line"></span><br><span class="line">void instanceMethod(java.lang.String);</span><br><span class="line">  flags:</span><br><span class="line">  Code:</span><br><span class="line">    stack=0, locals=2, args_size=2</span><br><span class="line">       0: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 13: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       1     0  this   Ltest/Base;</span><br><span class="line">          0       1     1  str1   Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">static void classMethod(java.lang.String);</span><br><span class="line">  flags: ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=0, locals=1, args_size=1</span><br><span class="line">       0: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 17: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       1     0  str2   Ljava/lang/String;</span><br></pre></td></tr></table></figure></p><ul><li>1行：定义了一个String类型的实例变量name，注意只是定义，并没有赋值。默认为null。</li><li>2行：name变量的访问控制符，没有表示默认访问权限。</li><li>4-19行：Base类的默认的构造方法。因为我们并没有显式的定义constructor，所以编译器会生成一个默认的无参constructor，和我们手动定义一个方法体为空的无参构造方法效果完全一样。<br>其中7-13行是构造方法的代码区域；第17-19行描述的是Java源码中定义的局部变量与该方法被执行时栈帧中的局部变量表中的变量的对应关系。<strong>第7行args_size=1，说明构造方法有一个参数，那我们就看下第17-19行的LocalVariableTbale中这个参数到底是什么。我们发现，这个唯一的局部变量就是this！且其静态类型为Base！：</strong><br>10-12行，是给实例变量name进行初始化赋值。即实例变量的初始赋值操作，是在构造方法中进行的。</li><li>21-31行：instanceMethod实例方法。同样我们看到字节码文件中却有两个参数，args_size=2，第一个参数是this，且参数的静态类型为Base！</li><li>33-39行：classMethod静态方法，属于类的。我们可以明确的看到args_size=1，即只有我们自己定义的参数str2。<strong>类方法（静态方法）中，并没有this局部变量！当然，我们也就无法在类方法中使用this关键字了！</strong></li></ul><blockquote><p>上述示例，总结如下：</p><ol><li>构造方法、实例方法的第一个参数是this！这是由编译器自动添加的。</li><li>this引用变量的数据类型是，this所在方法的所属类。即，编码时，this出现在哪个类中，this的数据类型就是这个类。</li><li>既然编译器会自动给实例方法添加一个this参数，那么就不难理解，当调用某个实例对象的方法时，编译器会将该实例对象当做参数传递到调用方法中了。</li></ol></blockquote><h2 id="手动传递this参数"><a href="#手动传递this参数" class="headerlink" title="手动传递this参数"></a>手动传递this参数</h2><p>既然第一个参数是编译器自动添加的this。那么，为了更好的理解，我们就假设，如果编译器不给我们添加this参数，我们自己写的话应该怎么写呢？模拟如下<strong>（不可能通过编译的，只是为了理解）</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name = <span class="string">"I am Base"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设编译器不会自动添加this参数，实例方法需要手动添加this参数，参数类型为方法所在类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">instanceMethod</span><span class="params">(Base <span class="keyword">this</span>, String str1)</span> </span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态方法，无this参数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classMethod</span><span class="params">(String str2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个静态类型为Base的引用变量b，生成一个Base对象，并将其引用赋值给变量b</span></span><br><span class="line">Base b = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="comment">//引用变量b调用实例方法，该方法接受两个参数，其中第一个就是引用变量b本身</span></span><br><span class="line">b.instanceMethod(b, <span class="string">"str1"</span>);</span><br><span class="line"><span class="comment">//引用变量b调用类方法，类方法没有this参数，所以不需要传递引用变量b本身</span></span><br><span class="line">b.classMethod(<span class="string">"str2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我想，这会儿大家应该知道，在方法体内部使用的this，是怎么来的了吧。<br>this其实就是通过方法体的第一个参数传递过来的，它指代调用该方法的对象。通过这个例子应该能够更加直观具体的体会this的含义了。</p><h1 id="2-this的本质"><a href="#2-this的本质" class="headerlink" title="2. this的本质"></a>2. this的本质</h1><ol><li><strong>实例方法中（非构造非静态）：this指代的是正在调用当前方法的对象</strong></li><li><strong>构造方法中：this指代的是正在new的对象本身</strong></li></ol><blockquote><p>关键点：</p><ol><li>this指代的一定是对象，是jvm堆中的某个class的实例对象的引用；this代表的不是class或者其他。</li><li>this出现的位置一般是在方法体内部（包括方法参数位置），假设this在methodA中出现，那么this指代的就是正在调用methodA的那个对象；即便this出现在方法体外部。如，假设在class A 中定义成员变量 A a = this; 最终这行代码仍然会被放入class A 的到构造函数中执行。</li><li>为了便于理解，对this在普通方法和构造方法中进行了区分。其实，构造方法的真正功能是对对象进行初始化。<br>实际上，在jvm层面上，在执行构造方法之前，jvm已经为在堆中给对象分配好了内存空间，并将该对象的引用当做参数传递到构造方法中，构造方法的执行，只是为了给对象进行初始化。所以，我们仍然可以按照第一条表述来理解，即，构造方法是由新创建的对象来调用的，构造方法中的this，仍然指代的是正在调用该构造方法的对象。</li><li>静态方法以及静态代码块中，不能使用this。原因很简单，从逻辑上讲，静态方法是可以直接通过类名进行调用的，根本就没有实例对象，所以在静态方法中，不能使用this；静态代码块，是在jvm第一次加载该类时执行的，此时更不会有实例对象，所以this也不能出现在静态代码块中。从java语法上讲，静态方法的参数列表中是没有this参数的。</li></ol></blockquote><p>至此，关于什么是this就已经讲清楚了。看似简单，但是，在使用this调用实例变量、方法，特别是存在继承关系时，会出现很多令人不解的语法现象。要彻底理解这些问题，还需要其他的一些java底层知识作为支撑。后续博客我会继续讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-从字节码文件看this&quot;&gt;&lt;a href=&quot;#1-从字节码文件看this&quot; class=&quot;headerlink&quot; title=&quot;1. 从字节码文件看this&quot;&gt;&lt;/a&gt;1. 从字节码文件看this&lt;/h1&gt;&lt;p&gt;当我们在方法内部使用this调用属性、方法的时候
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wywncdx.github.io/2018/03/29/hello-world/"/>
    <id>https://wywncdx.github.io/2018/03/29/hello-world/</id>
    <published>2018-03-29T06:12:54.998Z</published>
    <updated>2018-03-29T06:12:55.002Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
